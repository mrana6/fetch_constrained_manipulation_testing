clear; close all; clc;

import gtsam.*
import gpmp2.*

addpath(genpath('util'));

%% Problem Setup

% rotation to fix align gpmp2 with actual robot
q_correction = [0, 0.7071, 0, 0.7071];


% arm info
arm_name = 'fetch';
dof = 7;   % degrees of freedom

% cartesian constraints info
cart_file_path = 'data/eef/dh/hat_reach.txt';
traj_cart = load(cart_file_path); % load cartesian trajectory
traj_cart = traj_cart(1:4:end,:);
num_pts = size(traj_cart,1);   % number of cartesian constraints

start_conf = [1.60517731706 -0.416938478551 2.71645797496 0.791172502393 0.269659725458 2.0819469834 1.3784506785]';
end_conf = [1.57373038331 -0.377438480459 2.69728339915 1.3069734553 0.250101087124 1.63517488486 1.23272209039]';

% start_conf = [1.319999 1.399992 -0.199852 1.719961 0.000004 1.660004 -0.000004]';
% end_conf = [1.313969 1.400287 -0.286697 1.715473 -0.019800 1.664048 -0.080231]';

% smoothness param
Qc = 1;

% constraint params
fix_pose_sigma = 0.0001;
fix_vel_sigma = 0.0001;
fix_cartpos_sigma = 0.0001;
fix_cartorient_sigma = 0.001;

% timing information
total_time_step = num_pts-1;
total_time_sec = 10;
total_check_step = 100;

% obtsacle avoaidance params
cost_sigma = 0.02;
epsilon_dist = 0.01;

% obstacle environmen information
% obs_info = [0.8, 0, 0.73, 0.5, 1.5, 0.03; ...
%     0.15, 0, 1, 0.3, 0.8, 2.0];

obs_info = [];
% generate sdf
[obs_sdf, obs_dataset] = setupEnvironment3D(obs_info);

%% Generate Arm Model
arm_origin =  [0.033, 0, 0.726]';
arm_model = generateFetchArm(arm_origin);

start_vel = zeros(7,1);
end_vel = zeros(7,1);

%% Plot planning problem

% plot environment and robot
h = figure(1); clf(1);
set(h, 'Position', [-1200, 100, 1100, 1200]);
hold on; axis equal;
xlabel('x'); ylabel('y'); zlabel('z');
% plotSignedDistanceField3D(field, origin, cell_size);
hcp = plotRobotModel(arm_model, start_conf);
plotArm(arm_model.fk_model(), start_conf, 'b', 2);
grid on;
view(10,60);
zoom(1);
plotEnvironment(obs_info);
axis([-1 1 -1 1 0 2.5]);
hold off;

%% setting up the problem

delta_t = total_time_sec / total_time_step;
check_inter = total_check_step / total_time_step - 1;

% GP
Qc_model = noiseModel.Gaussian.Covariance(Qc*eye(dof)); 

pose_fix_model = noiseModel.Isotropic.Sigma(dof, fix_pose_sigma);
vel_fix_model = noiseModel.Isotropic.Sigma(dof, fix_vel_sigma);

fix_cartpos_model = noiseModel.Isotropic.Sigma(3, fix_cartpos_sigma);
fix_cartorient_model = noiseModel.Isotropic.Sigma(3, fix_cartorient_sigma);

% plot settings
plot_inter_traj =false;
plot_inter = 10;
if plot_inter_traj
    total_plot_step = total_time_step * (plot_inter + 1);
else
    total_plot_step = total_time_step;
end
pause_time = total_time_sec / total_plot_step;

%% initial traj
init_values = initArmTrajStraightLine(start_conf, end_conf, total_time_step);

%% init optimization
graph = NonlinearFactorGraph;
graph_obs = NonlinearFactorGraph;

for i = 0 : total_time_step
    key_pos = symbol('x', i);
    key_vel = symbol('v', i);
    
    % priors
    if i==0
        graph.add(PriorFactorVector(key_pos, start_conf, pose_fix_model));
        graph.add(PriorFactorVector(key_vel, start_vel, vel_fix_model));
    elseif i==total_time_step
        %graph.add(PriorFactorVector(key_pos, end_conf, pose_fix_model));
        graph.add(PriorFactorVector(key_vel, end_vel, vel_fix_model));
    else
        
    end
    
    pos = traj_cart(i+1,1:3);
    orient = [traj_cart(i+1,7), traj_cart(i+1,4), traj_cart(i+1,5),traj_cart(i+1,6)];
    % Workspace constraints
    graph.add(GaussianPriorWorkspacePositionArm(key_pos, arm_model, dof-1, Point3(pos'), fix_cartpos_model));
    graph.add(GaussianPriorWorkspaceOrientationArm(key_pos, arm_model, dof-1, Rot3.Quaternion(orient(1), orient(2), orient(3), orient(4)), fix_cartorient_model));
    
    % GP priors and cost factor
    if i > 0
        key_pos1 = symbol('x', i-1);
        key_pos2 = symbol('x', i);
        key_vel1 = symbol('v', i-1);
        key_vel2 = symbol('v', i);
        graph.add(GaussianProcessPriorLinear(key_pos1, key_vel1, ...
            key_pos2, key_vel2, delta_t, Qc_model));
        
        % cost factor
        graph.add(ObstacleSDFFactorArm(...
            key_pos, arm_model, obs_sdf, cost_sigma, epsilon_dist));
        graph_obs.add(ObstacleSDFFactorArm(...
            key_pos, arm_model, obs_sdf, cost_sigma, epsilon_dist));
        
        % GP cost factor
        if check_inter > 0
            for j = 1:check_inter
                tau = j * (total_time_sec / total_check_step);
                graph.add(ObstacleSDFFactorGPArm( ...
                    key_pos1, key_vel1, key_pos2, key_vel2, ...
                    arm_model, obs_sdf, cost_sigma, epsilon_dist, ...
                    Qc_model, delta_t, tau));
                graph_obs.add(ObstacleSDFFactorGPArm( ...
                    key_pos1, key_vel1, key_pos2, key_vel2, ...
                    arm_model, obs_sdf, cost_sigma, epsilon_dist, ...
                    Qc_model, delta_t, tau));
            end
        end
    end
end


%% optimize!
use_LM = true;
use_trustregion_opt = false;

if use_LM
    parameters = LevenbergMarquardtParams;
    parameters.setVerbosity('ERROR');
    parameters.setVerbosityLM('LAMBDA');
%   parameters.setlambdaUpperBound(1e10);
    parameters.setlambdaInitial(1200.0);
    parameters.setMaxIterations(500);
    optimizer = LevenbergMarquardtOptimizer(graph, init_values, parameters);
elseif use_trustregion_opt
    parameters = DoglegParams;
    parameters.setMaxIterations(1000);
    parameters.setVerbosity('ERROR');
    optimizer = DoglegOptimizer(graph, init_values, parameters);
else
    parameters = GaussNewtonParams;
    parameters.setVerbosity('ERROR');
    optimizer = GaussNewtonOptimizer(graph, init_values, parameters);
end

fprintf('Initial Error = %d\n', graph.error(init_values))
fprintf('Initial Collision Cost: %d\n', graph_obs.error(init_values))

optimizer.optimize();

result = optimizer.values();
% result.print('Final results')

fprintf('Error = %d\n', graph.error(result))
fprintf('Collision Cost End: %d\n', graph_obs.error(result))

%% plot results
if plot_inter_traj
    plot_values = interpolateArmTraj(result, Qc_model, delta_t, plot_inter);
else
    plot_values = result;
end

% plot final values
% figure(4),
% clf(4), hold on
% title('Result Values')
% plot world
% plotEnvironment(obs_info);
% for i=0:total_plot_step
%     % plot arm
%     conf = plot_values.atVector(symbol('x', i));
%     plotArm(arm_model.fk_model(), conf, 'b', 2);
%     % plot config
%     set3DPlotRange(obs_dataset);
%     grid on, view(50, 80);
%     pause(pause_time)
% end
% hold off

% plot final values

% output_traj = [];
% output_cart_traj = [];
% h = figure(5), hold on; set(h, 'Position', [-1200, 100, 1100, 1200]);
% fk_model = arm_model.fk_model;
% for i=0:total_plot_step
%     conf = plot_values.atVector(symbol('x', i));
%     output_traj = [output_traj; conf'];
%     fk = fk_model.forwardKinematicsPose(conf);
%     output_cart_traj =  [output_cart_traj; fk(:,end).'];
% end


% 
% 
% output_traj = [];
% output_cart_traj = [];
% h = figure(5), hold on; set(h, 'Position', [-1200, 100, 1100, 1200]);
for i=0:total_plot_step
%     clf(5)
%     hold on, view(27, 1)
%     title('Result Values')
%     % plot world
%     plotEnvironment(obs_info);
%     % plot arm
    conf = plot_values.atVector(symbol('x', i));
    output_traj = [output_traj; conf'];
%     plotRobotModel(arm_model, conf);
%     % plot config
%     set3DPlotRange(obs_dataset);
%     grid on;
%     pause(pause_time);
end
% hold off

%%

addpath(genpath('fetch_description'))

robot = importrobot('fetch.urdf');
robot.DataFormat = 'column';

% figure('units','normalized','outerposition',[0 0 1 1]); hold on; grid on;
view(39,21);
robot_conf = homeConfiguration(robot);
robot_conf(7:13) = start_conf; 

show(robot,robot_conf); hold on;
plotEnvironment(obs_info);
pause;

for j = 1:size(output_traj,1)
    show(robot,,'PreservePlot', false);
    drawnow;
    pause(0.01);
end

pause;


%% save SDF
disp('saving sdf to .bin file...');
obs_sdf.saveSDF('fecthEmptyDataset.bin'); 